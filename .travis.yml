language: python

notifications:
  email: false

# The matrix expands to 3 builds: OSX and linux to build wheels
# and py36 and py37 for general testing
# For more information about building wheels, see:
# https://pythonwheels.com/
# https://github.com/joerick/cibuildwheel
# https://malramsay.com/post/perils_of_packaging/

matrix:
  include:

    - os: linux
      sudo: required
      services: docker
      python: '3.6'

    - os: linux
      dist: xenial    # required for Python 3.7 (travis-ci/travis-ci#9069)
      sudo: required
      services: docker
      python: '3.7'

    - os: linux
      dist: xenial 
      sudo: required
      services: docker
      python: '3.8'

    - os: osx
      language: generic

# The first 3 global variables are for the cibuildwheel python package
# The remaining 2 are set to assure Python 3 is used on OS X (mac)
env:
  global:
    - CIBW_SKIP="cp27-* cp33-* cp34-*"
    - CIBW_TEST_REQUIRES=pytest
    - CIBW_TEST_COMMAND="python3 -m pytest {project}/KDEpy --doctest-modules"
    - PIP=pip3
    - PYTHON=python3

# If OS X - install Pyton 3 as python3.
# Print the python version, install general requirements and linting
before_install:
- if [ "${TRAVIS_OS_NAME:-}" == "osx" ]; then
    brew update;
  fi
- if [ "${TRAVIS_OS_NAME:-}" -ne "osx" ]; then
    sudo apt install libpython3.6-dev gcc gfortran python-dev libopenblas-dev liblapack-dev cython;
  fi
- $PYTHON --version
- $PIP install -r requirements.txt
- $PIP install pep8>=1.7.1
- $PIP install flake8>=3.5.0

# Install the package, create source distribution (worse alternative to wheels)
# Run the tests.
install:
- $PYTHON setup.py develop sdist
- $PYTHON -m pytest KDEpy --doctest-modules --capture=sys

# Linting
before_script:
- $PYTHON -m flake8 --show-source --ignore=F811,W293,W391,W292,W291,W504,W503 --max-line-length=88 --exclude="*examples.py,testing.py,*kde.py" KDEpy

# If a tag was used, build wheels and deply to pypi
script:
- echo "$TRAVIS_TAG"
- if [ -n "$TRAVIS_TAG" ]; then
  $PIP install cibuildwheel;
  $PYTHON -m cibuildwheel --output-dir wheelhouse;
  $PIP install twine;
  $PYTHON -m twine upload dist/* -u tommyod -p $TWINE_PASSWORD --skip-existing;
  fi
