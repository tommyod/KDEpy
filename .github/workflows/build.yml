name: Build wheels

on: 
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # Allow one of the matrix builds to fail without failing others
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install cibuildwheel
        run: |
          pip install --upgrade pip
          pip install cibuildwheel==2.21.3
      
      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Build wheels
        env:
          CIBW_BUILD: 'cp38-* cp39-* cp310-* cp311-* cp312-* cp313-*'
          CIBW_ARCHS_LINUX: auto aarch64
          CIBW_ARCHS_MACOS: x86_64 arm64
          CIBW_SKIP: pp* *-musllinux_* *-manylinux_i686  # skip PyPy, musllinux, 32-bit Linux
        run: |
          pip install cibuildwheel --upgrade;
          python -m cibuildwheel --output-dir dist;

      - name: Store artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions-${{ matrix.os }}  # Unique name per OS
          path: dist/*.whl
          # Remove overwrite: true

  package_source:
    name: Package source distribution
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install build
        run: |
          python -m pip install build twine pkginfo --upgrade

      - name: Run sdist
        run: |
          python -m build --sdist
          twine check dist/*

      - name: Store artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions-source  # Unique name for source
          path: ./dist/*.tar.gz

  publish_to_pypi:
    needs:
      - build_wheels
      - package_source
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'  # Only publish from the master branch

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/  # Downloads all artifacts to this directory
          
      - name: Merge artifacts
        run: |
          mkdir final_dist
          find dist -type f -name "*.whl" -exec cp {} final_dist/ \;
          find dist -type f -name "*.tar.gz" -exec cp {} final_dist/ \;
          
      - name: Install build
        run: |
          python -m pip install build twine pkginfo packaging --upgrade
          twine check final_dist/*
          
      # https://github.com/pypa/gh-action-pypi-publish
      - name: Publish Python distribution to PyPI
        uses: pypa/gh-action-pypi-publish@v1.12.4
        with:
          skip-existing: true
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: final_dist/  # Point to the merged directory
